name: "vprofile-IAC"

on:
  push:
    branches:
      - main
      - stage
    paths:
      - terraform/**
  pull_request:
    branches:
      - main
    paths:
      - terraform/**

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_DEFAULT_REGION: us-east-1
  EKS_CLUSTER_NAME: vpro-ekss

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform with specified version
        uses: hashicorp/setup-terraform@v2
        with:
         terraform_version: 1.6.3


      - name: Show Terraform version
        run: terraform version

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=planfile
        continue-on-error: true

      - name: Check Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: terraform apply
        id: apply
        #if: github.ref ==  github.ref == 'refs/heads/main' && github.event_name=='push'
        if: github.ref ==  github.ref == 'refs/heads/stage' && github.event_name=='push'
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile
        
      - name: Configure aws credetials
        uses:   aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_DEFAULT_REGION}}
      
      - name: get kube config file 
        id: getconfig
        if: steps.apply.outcome == 'success'
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region ${{env.AWS_DEFAULT_REGION}} --alias eks --profile vpro-eks-admin-pro

      - name: Install ingress controller
        if: steps.apply.outcome=='success' && steps.getconfig.outcome=='success'
        id: ingress-controller-de
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.3/deploy/static/provider/aws/deploy.yaml

 

    
     